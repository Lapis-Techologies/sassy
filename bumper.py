from importlib import import_module
from io import StringIO
from typing import Protocol
from argparse import ArgumentParser, BooleanOptionalAction


def load_version() -> Protocol:
    """
    Load the version file to work on it
    """
    try:
        return import_module("version")
    except ImportError:
        with open("version.py", "w") as file:
            file.write("")
        return type('', (), {'MAJOR': 0, 'MINOR': 0, 'PATCH': 0})()


def variable_check(version) -> list[int]:
    """
    Checks if required variables exist in the file.

    returns list[MAJOR VERSION, MINOR VERSION, PATCH]
    """

    found = []

    v = dir(version)

    found.append(version.MAJOR if "MAJOR" in v else 0)
    found.append(version.MINOR if "MINOR" in v else 0)
    found.append(version.PATCH if "PATCH" in v else 0)

    return found


def update_version(changes: list[int], version: list[int]) -> list[int]:
    if changes[0] == 1:
        version[1] = 0
        version[2] = 0
    elif changes[1] == 1:
        version[2] = 0

    return [version[0] + changes[0], version[1] + changes[1], version[2] + changes[2]]


def write(version: list[int]) -> None:
    script = StringIO()
    script.write(f"# THIS FILE WAS AUTOMATICALLY GENERATED BY {__file__.upper()}\n")
    script.write(f"# DO NOT EDIT THIS FILE MANUALLY! USE {__file__}\n\n")
    script.write(f"MAJOR = {version[0]}\nMINOR = {version[1]}\nPATCH = {version[2]}\n")

    with open("version.py", "w") as file:
        script.seek(0)
        file.write(script.read())


def main() -> None:
    parser = ArgumentParser()

    parser.add_argument("-M", "--major", type=bool, action=BooleanOptionalAction, default=False)
    parser.add_argument("-m", "--minor", type=bool, action=BooleanOptionalAction, default=False)
    parser.add_argument("-p", "--patch", type=bool, action=BooleanOptionalAction, default=False)
    parser.add_argument("-q", "--quiet", type=bool, action=BooleanOptionalAction, default=False)


    args = parser.parse_args()

    version = variable_check(load_version())

    if (args.major, args.minor, args.patch) == (False, False, False):
        if args.quiet:
            print('.'.join(str(num) for num in version))
            return

        print(f'Sassy Bot Version {'.'.join(str(num) for num in version)}')
        print('Did not edit version.')
        return
    
    new_version = update_version([int(args.major), int(args.minor), int(args.patch)], version)

    write(new_version)
    print(f'Sassy bot Version {'.'.join(str(num) for num in new_version)}')
    print(f'Updated, {''.join(['Major, ' if args.major else '', 'Minor, ' if args.minor else '', 'Patch ' if args.patch else ''])}Versions.')


if __name__ == "__main__":
    main()
